plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

jacoco {
	toolVersion = "0.8.12"
}

group = 'project.1st'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // 테스트가 끝난 후 리포트를 생성하도록 설정
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// auth 관련
					'**/auth/**',
					'!**/auth/filter/**',
					'!**/auth/jwt/service/ReissueServiceImpl.class',
					'!**/auth/jwt/controller/**',
					'!**/auth/jwt/util/**',
					'!**/auth/oauth/handler/**',
					'!**/auth/oauth/service/**',

					// Config
					'**/config/**',

					// common
					'**/domain/common/**',

					// email
					'**/email/dto/**',

					// gym
					'**/gym/dto/**',
					'**/gym/entity/**',
					'**/gym/repository/**',

					// gymtrainer
					'**/gymtrainer/dto/**',
					'**/gymtrainer/repository/**',

					// kakao
					'**/kakao/dto/**',

					// member
					'**/member/dto/**',
					'**/member/entity/etcfield/**',
					'!**/member/entity/Member.class',
					'**/member/repository/**',

					// normember
					'**/normember/dto/**',
					'**/normember/entity/**',
					'**/normember/repository/**',

					// ptmembership
					'**/ptmembership/**',

					// redis
					'**/redis/**',

					// review
					'**/review/dto/**',
					'**/review/repository/**',

					// trainer
					'**/trainer/dto/**',
					'**/trainer/entity/**',
					'**/trainer/repository/**',

					// test data
					'**/testdata/**',

					// 메인 진입점
					'**/*Application*',
			])
		}))
	}
}